// –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω–µ–π
import { LEVELS } from "@/config/levels";

export const analyzeLevels = () => {
  console.log("üìä –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π:");
  console.log("=".repeat(60));
  
  LEVELS.forEach(level => {
    const totalTiles = level.kanaCount * level.tilesPerKana;
    const totalCapacity = level.branchCount * level.branchCapacity;
    const freeSpace = totalCapacity - totalTiles;
    const freeSpacePercent = Math.round((freeSpace / totalCapacity) * 100);
    
    // –†–∞—Å—Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
    const maxTilesPerBranch = Math.min(level.branchCapacity, Math.ceil(totalTiles / Math.max(1, level.branchCount - 2)));
    const filledBranches = Math.ceil(totalTiles / maxTilesPerBranch);
    const emptyBranches = level.branchCount - filledBranches;
    
    console.log(`Level ${level.level}: ${level.name}`);
    console.log(`  –ö–∞–Ω: ${level.kanaCount} √ó ${level.tilesPerKana} = ${totalTiles} —Ç–∞–π–ª–æ–≤`);
    console.log(`  –í–µ—Ç–æ–∫: ${level.branchCount} (${filledBranches} –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö, ${emptyBranches} –ø—É—Å—Ç—ã—Ö)`);
    console.log(`  –ú–∞–∫—Å —Ç–∞–π–ª–æ–≤ –Ω–∞ –≤–µ—Ç–∫—É: ${maxTilesPerBranch}`);
    console.log(`  –û–±—â–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${totalCapacity} –º–µ—Å—Ç`);
    console.log(`  –°–≤–æ–±–æ–¥–Ω–æ: ${freeSpace} –º–µ—Å—Ç (${freeSpacePercent}%)`);
    console.log(`  –ö–∞–Ω—ã: ${level.kanaSubset.join(", ")}`);
    console.log("");
  });
};

// –í—ã–∑–æ–≤–µ–º –∞–Ω–∞–ª–∏–∑ –≤ dev —Ä–µ–∂–∏–º–µ
if (import.meta.env.DEV) {
  analyzeLevels();
}
