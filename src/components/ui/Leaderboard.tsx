import React, { useState } from 'react';
import { Card } from './card';
import { Badge } from './badge';
import { Button } from './button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './tabs';
import { Trophy, Clock, Target, Calendar } from 'lucide-react';
import { 
  getLeaderboard, 
  getLevelStats, 
  getOverallStats, 
  getTopGames, 
  formatTime,
  LeaderboardEntry 
} from '@/utils/leaderboard';
import { cn } from '@/lib/utils';

interface LeaderboardProps {
  level?: number;
  className?: string;
}

export const Leaderboard: React.FC<LeaderboardProps> = ({ 
  level, 
  className 
}) => {
  const [selectedTab, setSelectedTab] = useState<'level' | 'overall'>('level');
  
  const leaderboard = getLeaderboard();
  const levelStats = level ? getLevelStats(level) : null;
  const overallStats = getOverallStats();
  const topScores = getTopGames('score', 5);
  const topTimes = getTopGames('time', 5);
  const topMoves = getTopGames('moves', 5);

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'short',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getRankIcon = (rank: number) => {
    switch (rank) {
      case 1: return 'ü•á';
      case 2: return 'ü•à';
      case 3: return 'ü•â';
      default: return `#${rank}`;
    }
  };

  const EntryCard: React.FC<{ entry: LeaderboardEntry; rank: number; highlight?: 'score' | 'time' | 'moves' }> = ({ 
    entry, 
    rank, 
    highlight 
  }) => (
    <Card className="p-3">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className="text-lg font-bold text-muted-foreground min-w-[3rem]">
            {getRankIcon(rank)}
          </div>
          <div>
            <div className="font-semibold">–£—Ä–æ–≤–µ–Ω—å {entry.level}</div>
            <div className="text-sm text-muted-foreground">
              {formatDate(entry.date)}
            </div>
          </div>
        </div>
        
        <div className="flex gap-4 text-sm">
          <div className={cn("text-center", highlight === 'score' && "text-yellow-600 font-bold")}>
            <div className="text-lg font-semibold">{entry.score}</div>
            <div className="text-muted-foreground">–æ—á–∫–æ–≤</div>
          </div>
          <div className={cn("text-center", highlight === 'time' && "text-blue-600 font-bold")}>
            <div className="text-lg font-semibold">{formatTime(entry.timeSpent)}</div>
            <div className="text-muted-foreground">–≤—Ä–µ–º—è</div>
          </div>
          <div className={cn("text-center", highlight === 'moves' && "text-green-600 font-bold")}>
            <div className="text-lg font-semibold">{entry.moves}</div>
            <div className="text-muted-foreground">—Ö–æ–¥–æ–≤</div>
          </div>
        </div>
      </div>
    </Card>
  );

  if (level && (!leaderboard[level] || leaderboard[level].recentGames.length === 0)) {
    return (
      <Card className={cn("p-6 text-center", className)}>
        <Trophy className="w-12 h-12 text-muted-foreground mx-auto mb-3" />
        <h3 className="text-lg font-semibold text-muted-foreground mb-2">
          –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É—Ä–æ–≤–Ω—è {level}
        </h3>
        <p className="text-muted-foreground">
          –ó–∞–≤–µ—Ä—à–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–¥–µ—Å—å
        </p>
      </Card>
    );
  }

  return (
    <div className={className}>
      <Tabs value={selectedTab} onValueChange={(value) => setSelectedTab(value as 'level' | 'overall')}>
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="level" disabled={!level}>
            –£—Ä–æ–≤–µ–Ω—å {level || '?'}
          </TabsTrigger>
          <TabsTrigger value="overall">
            –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          </TabsTrigger>
        </TabsList>
        
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ä–æ–≤–Ω—è */}
        {level && levelStats && (
          <TabsContent value="level" className="space-y-4">
            {/* –†–µ–∫–æ—Ä–¥—ã —É—Ä–æ–≤–Ω—è */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {leaderboard[level]?.bestScore && (
                <Card className="p-4 bg-yellow-50 dark:bg-yellow-900/20">
                  <div className="flex items-center gap-2 mb-2">
                    <Trophy className="w-5 h-5 text-yellow-500" />
                    <span className="font-medium">–õ—É—á—à–∏–π —Å—á–µ—Ç</span>
                  </div>
                  <div className="text-2xl font-bold text-yellow-600">
                    {leaderboard[level].bestScore.score}
                  </div>
                  <div className="text-sm text-muted-foreground">
                    {formatDate(leaderboard[level].bestScore!.date)}
                  </div>
                </Card>
              )}
              
              {leaderboard[level]?.bestTime && (
                <Card className="p-4 bg-blue-50 dark:bg-blue-900/20">
                  <div className="flex items-center gap-2 mb-2">
                    <Clock className="w-5 h-5 text-blue-500" />
                    <span className="font-medium">–õ—É—á—à–µ–µ –≤—Ä–µ–º—è</span>
                  </div>
                  <div className="text-2xl font-bold text-blue-600">
                    {formatTime(leaderboard[level].bestTime.timeSpent)}
                  </div>
                  <div className="text-sm text-muted-foreground">
                    {formatDate(leaderboard[level].bestTime!.date)}
                  </div>
                </Card>
              )}
              
              {leaderboard[level]?.bestMoves && (
                <Card className="p-4 bg-green-50 dark:bg-green-900/20">
                  <div className="flex items-center gap-2 mb-2">
                    <Target className="w-5 h-5 text-green-500" />
                    <span className="font-medium">–ú–µ–Ω—å—à–µ —Ö–æ–¥–æ–≤</span>
                  </div>
                  <div className="text-2xl font-bold text-green-600">
                    {leaderboard[level].bestMoves.moves}
                  </div>
                  <div className="text-sm text-muted-foreground">
                    {formatDate(leaderboard[level].bestMoves!.date)}
                  </div>
                </Card>
              )}
            </div>

            {/* –ù–µ–¥–∞–≤–Ω–∏–µ –∏–≥—Ä—ã */}
            <div>
              <h3 className="text-lg font-semibold mb-3">–ù–µ–¥–∞–≤–Ω–∏–µ –∏–≥—Ä—ã</h3>
              <div className="space-y-2">
                {leaderboard[level]?.recentGames.slice(0, 5).map((entry, index) => (
                  <EntryCard key={entry.id} entry={entry} rank={index + 1} />
                ))}
              </div>
            </div>
          </TabsContent>
        )}
        
        {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <TabsContent value="overall" className="space-y-4">
          {overallStats.totalGames > 0 ? (
            <>
              {/* –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <Card className="p-4 text-center">
                  <div className="text-2xl font-bold text-blue-600">
                    {overallStats.totalGames}
                  </div>
                  <div className="text-sm text-muted-foreground">
                    –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ
                  </div>
                </Card>
                
                <Card className="p-4 text-center">
                  <div className="text-2xl font-bold text-green-600">
                    {overallStats.levelsPlayed}
                  </div>
                  <div className="text-sm text-muted-foreground">
                    –£—Ä–æ–≤–Ω–µ–π –ø—Ä–æ–π–¥–µ–Ω–æ
                  </div>
                </Card>
                
                <Card className="p-4 text-center">
                  <div className="text-2xl font-bold text-yellow-600">
                    {overallStats.averageScore}
                  </div>
                  <div className="text-sm text-muted-foreground">
                    –°—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç
                  </div>
                </Card>
                
                <Card className="p-4 text-center">
                  <div className="text-2xl font-bold text-purple-600">
                    {formatTime(overallStats.totalTime)}
                  </div>
                  <div className="text-sm text-muted-foreground">
                    –û–±—â–µ–µ –≤—Ä–µ–º—è
                  </div>
                </Card>
              </div>

              {/* –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div>
                  <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                    <Trophy className="w-5 h-5 text-yellow-500" />
                    –õ—É—á—à–∏–µ —Å—á–µ—Ç–∞
                  </h3>
                  <div className="space-y-2">
                    {topScores.slice(0, 3).map((entry, index) => (
                      <EntryCard key={entry.id} entry={entry} rank={index + 1} highlight="score" />
                    ))}
                  </div>
                </div>
                
                <div>
                  <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                    <Clock className="w-5 h-5 text-blue-500" />
                    –õ—É—á—à–µ–µ –≤—Ä–µ–º—è
                  </h3>
                  <div className="space-y-2">
                    {topTimes.slice(0, 3).map((entry, index) => (
                      <EntryCard key={entry.id} entry={entry} rank={index + 1} highlight="time" />
                    ))}
                  </div>
                </div>
                
                <div>
                  <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                    <Target className="w-5 h-5 text-green-500" />
                    –ú–µ–Ω—å—à–µ —Ö–æ–¥–æ–≤
                  </h3>
                  <div className="space-y-2">
                    {topMoves.slice(0, 3).map((entry, index) => (
                      <EntryCard key={entry.id} entry={entry} rank={index + 1} highlight="moves" />
                    ))}
                  </div>
                </div>
              </div>
            </>
          ) : (
            <Card className="p-6 text-center">
              <Calendar className="w-12 h-12 text-muted-foreground mx-auto mb-3" />
              <h3 className="text-lg font-semibold text-muted-foreground mb-2">
                –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
              </h3>
              <p className="text-muted-foreground">
                –ó–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
              </p>
            </Card>
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
};
